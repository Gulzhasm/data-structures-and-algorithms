package leetcode.assignments.arrays.slidingWindow;

import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;

public class Sum {
    public static void main(String[] args) {
        /*
        9807,9807,9807,9807,9807,9807,1303,9059,9059,9059,9059,9059,9059,8161,8161,8161,8161,8161,8161,6823,6823,6218,6218,6869,8595,8718,8718,8718,8718,8718,8718,9766,9766,9766,9766,9766,9766,4600,4600,4600,4600,0,0,5786,5786,5786,5786,5786,5786,3180,3180,1750,1750,1750,1750,5872,6144,6144,6144,8507,8507,8507,8507,8507,8507,7629,7629,7629,8899,8899,8899,8899,8899,8899,8740,8740,8740,8740,8740,6280,6280,2209,2385,2385,7028,7028,7272,7272,7272,7272,7272,9087,9087,9087,9087,9087,9087,5534,5534,5534,6699,7558,7558,7558,7558,7558,7558,8854,8854,8854,8854,8854,8854,1302,1302,1302,1369,3322,3322,3322,3322,3322,8243,8243,8993,8993,8993,8993,8993,8993
        9807,9807,9807,9807,9807,9807,1303,9059,9059,9059,9059,9059,9059,8161,8161,8161,8161,8161,8161,6823,6823,6218,6218,6869,8595,8718,8718,8718,8718,8718,8718,9766,9766,9766,9766,9766,9766,4600,4600,4600,4600,-1485,-1486,5786,5786,5786,5786,5786,5786,3180,3180,1750,1750,1750,1750,5872,6144,6144,6144,8507,8507,8507,8507,8507,8507,7629,7629,7629,8899,8899,8899,8899,8899,8899,8740,8740,8740,8740,8740,6280,6280,2209,2385,2385,7028,7028,7272,7272,7272,7272,7272,9087,9087,9087,9087,9087,9087,5534,5534,5534,6699,7558,7558,7558,7558,7558,7558,8854,8854,8854,8854,8854,8854,1302,1302,1302,1369,3322,3322,3322,3322,3322,8243,8243,8993,8993,8993,8993,8993,8993
        9807, 9807, 9807, 9807, 9807, 9807, 1303, 9059, 9059, 9059, 9059, 9059, 9059, 8161, 8161, 8161, 8161, 8161, 8161, 6823, 6823, 6218, 6218, 6869, 8595, 8718, 8718, 8718, 8718, 8718, 8718, 9766, 9766, 9766, 9766, 9766, 9766, 4600, 4600, 4600, 4600, -1485, -1486, 5786, 5786, 5786, 5786, 5786, 5786, 3180, 3180, 1750, 1750, 1750, 1750, 5872, 6144, 6144, 6144, 8507, 8507, 8507, 8507, 8507, 8507, 7629, 7629, 7629, 8899, 8899, 8899, 8899, 8899, 8899, 8740, 8740, 8740, 8740, 8740, 6280, 6280, 2209, 2385, 2385, 7028, 7028, 7272, 7272, 7272, 7272, 7272, 9087, 9087, 9087, 9087, 9087, 9087, 5534, 5534, 5534, 6699, 7558, 7558, 7558, 7558, 7558, 7558, 8854, 8854, 8854, 8854, 8854, 8854, 1302, 1302, 1302, 1369, 3322, 3322, 3322, 3322, 3322, 8243, 8243, 8993, 8993, 8993, 8993, 8993, 8993
         */
        int[] nums = {-5769, -7887, -5709, 4600, -7919, 9807, 1303, -2644, 1144, -6410, -7159, -2041, 9059, -663, 4612, -257, 2870, -6646, 8161, 3380, 6823, 1871, -4030, -1758, 4834, -5317, 6218, -4105, 6869, 8595, 8718, -4141, -3893, -4259, -3440, -5426, 9766, -5396, -7824, -3941, 4600, -1485, -1486, -4530, -1636, -2088, -5295, -5383, 5786, -9489, 3180, -4575, -7043, -2153, 1123, 1750, -1347, -4299, -4401, -7772, 5872, 6144, -4953, -9934, 8507, 951, -8828, -5942, -3499, -174, 7629, 5877, 3338, 8899, 4223, -8068, 3775, 7954, 8740, 4567, 6280, -7687, -4811, -8094, 2209, -4476, -8328, 2385, -2156, 7028, -3864, 7272, -1199, -1397, 1581, -9635, 9087, -6262, -3061, -6083, -2825, -8574, 5534, 4006, -2691, 6699, 7558, -453, 3492, 3416, 2218, 7537, 8854, -3321, -5489, -945, 1302, -7176, -9201, -9588, -140, 1369, 3322, -7320, -8426, -8446, -2475, 8243, -3324, 8993, 8315, 2863, -7580, -7949, 4400};
        System.out.println(Arrays.toString(maxSlidingWindowQue(nums, 6)));

    }
    public static int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 1 || k == 1) {
            return nums;
        }

        int[] output = new int[nums.length - k + 1];

        int index = 0;
        int l = 0;
        while (k <= nums.length) {
            int max = Integer.MIN_VALUE;
            for (int i = l; i < k; i++) {
                if (nums[i] > max) {
                    max = nums[i];
                }
            }
            k++;
            l++;
            output[index] = max;
            index++;
        }
        return output;
    }

    public static int[] maxSlidingWindowQue(int[] nums, int k) {
        // 1 2 3 1 4 5 2 3 6
        Deque<Integer> dq = new LinkedList<>();
        int[] res = new int[nums.length - k + 1];
        int r = 0;
        for (int i = 0; i < nums.length; i++) {
            //check window size
            //2==0 iteration 4
            if (!dq.isEmpty() && dq.peek() == i - k) {
                dq.poll();
                //remove 5 iteration 8
            }

            //remove small element exist in the window
            while (!dq.isEmpty() && nums[dq.peekLast()] < nums[i]) {
                dq.pollLast();
                //remove 1(index =0) || iteration 2
                //remove 2(index =1) || iteration 3
                //remove 1,3(index =3,2) || iteration 5
                //remove 4(index =4) || iteration 6
                //remove 3,4 (index =7,6) iteration 9
            }
            //add element index
            dq.offer(i);
            //add 1 || iteration 1 [0]
            //add 2 || iteration 2 [1]
            //add 3 || iteration 3 [2]
            //add 1 || iteration 4 [2,3]
            //add 4 || iteration 5 [4]
            //add 5 || iteration 6 [5]
            // add 2 || iteration 7 [5,6]
            //add 3 ||. iteration 8 [5,6,7]
            //add 6|| iteration 9 [8]

            // add largest element which exist into k window into the result array
            if (i >= k - 1) {
                res[r++] = nums[dq.peek()];
                //add 3 || iteration 3
                //add 3 || iteration 4
                //add 4 || iteration 5
                //add 5 || iteration 6
                //add 5 || iteration 7
                //add 5 || iteration 8
                //add 6 || iteration 9
            }

        }
        return res;
    }


}
